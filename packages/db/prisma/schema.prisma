datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  issue         BountyIssues[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  privyDID      String?  @unique
  solanaAddress String?  @unique
}

model BountyIssues {
  id           String          @id @default(cuid())
  userId       String
  githubId     BigInt          
  htmlUrl      String          
  status       BountyStatus    @default(PENDING)
  contributorId   String?
  contributorClaimedAdd   String?
  bountyAmount        Int
  bountyAmountInLamports  Int
  transactions  Transaction[]
  user         User @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Transaction {
  id            String   @id @default(cuid())
  bountyIssueId String
  type          TransactionType
  status        TransactionStatus
  txnHash           String?
  bountyAmount        Int
  bountyAmountInLamports  Int
  createdAt     DateTime @default(now())

  bountyIssue   BountyIssues @relation(fields: [bountyIssueId], references: [id])
}

enum BountyStatus {
  PENDING      
  ACTIVE 
  CLAIMING      
  CLAIMED
  APPROVED         
  CANCELLING   
  CANCELED
  FAILED
}

enum TransactionType {
  DEPOSIT      
  WITHDRAWAL   
  PAYOUT
}

enum TransactionStatus {
  PENDING      
  CONFIRMED    
  FAILED       
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


 
